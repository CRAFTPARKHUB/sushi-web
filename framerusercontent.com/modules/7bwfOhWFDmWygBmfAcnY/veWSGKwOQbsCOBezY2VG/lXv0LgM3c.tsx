// Generated by Framer (9e1dc8e)

import { addFonts, cx, CycleVariantState, getLoadingLazyAtYPosition, Image, useComponentViewport, useLocaleInfo, useVariantState, withCSS } from "framer";
import { LayoutGroup, motion, MotionConfigContext } from "framer-motion";
import * as React from "react";

const serializationHash = "framer-B37TV"

const variantClassNames = {RTbTyDf3l: "framer-v-5tsxk7"};

function addPropertyOverrides(overrides, ...variants) {
const nextOverrides = {}
variants?.forEach(variant => variant && Object.assign(nextOverrides, overrides[variant]))
return nextOverrides
}

const transition1 = {bounce: 0.2, delay: 0, duration: 0.4, type: "spring"}

const Transition = ({value, children}) => {
const config = React.useContext(MotionConfigContext)
const transition = value ?? config.transition
const contextValue = React.useMemo(() => ({ ...config, transition }), [JSON.stringify(transition)])
return <MotionConfigContext.Provider value={contextValue}>{children}</MotionConfigContext.Provider>
}

const Variants = motion.create(React.Fragment)

const getProps = ({height, id, width, ...props}) => { return {...props} }

const createLayoutDependency = (props, variants) => {if (props.layoutDependency) return variants.join('-') + props.layoutDependency
return variants.join('-')}

export interface Props extends React.HTMLAttributes<HTMLDivElement> { style?: Record<string, unknown>;className?: string;layoutId?: string | number; }

const Component = React.forwardRef<HTMLDivElement, Props>(function(props, ref) {

const { activeLocale, setLocale } = useLocaleInfo()

const {style, className, layoutId, variant, ...restProps} = getProps(props)

const {baseVariant, classNames, clearLoadingGesture, gestureHandlers, gestureVariant, isLoading, setGestureState, setVariant, variants} = useVariantState({defaultVariant: "RTbTyDf3l", variant, variantClassNames})

const layoutDependency = createLayoutDependency(props, variants)

const ref1 = React.useRef<HTMLElement>(null)

const defaultLayoutId = React.useId()

const sharedStyleClassNames = []

const componentViewport = useComponentViewport()

return (<LayoutGroup id={layoutId ?? defaultLayoutId}>
<Variants animate={variants} initial={false}><Transition value={transition1}><Image {...restProps} {...gestureHandlers} background={{alt: "", fit: "fill", intrinsicHeight: 1100, intrinsicWidth: 1920, loading: getLoadingLazyAtYPosition((componentViewport?.y || 0)), pixelHeight: 1100, pixelWidth: 1920, sizes: componentViewport?.width || "100vw", src: "https://framerusercontent.com/images/8G8Y8b1ZHwFvDzVUQQlr4waN1DI.jpg", srcSet: "https://framerusercontent.com/images/8G8Y8b1ZHwFvDzVUQQlr4waN1DI.jpg?scale-down-to=512 512w,https://framerusercontent.com/images/8G8Y8b1ZHwFvDzVUQQlr4waN1DI.jpg?scale-down-to=1024 1024w,https://framerusercontent.com/images/8G8Y8b1ZHwFvDzVUQQlr4waN1DI.jpg 1920w"}} className={cx(serializationHash, ...sharedStyleClassNames, "framer-5tsxk7", className, classNames)} data-framer-name={"Desktop"} layoutDependency={layoutDependency} layoutId={"RTbTyDf3l"} ref={ref ?? ref1} style={{opacity: 0.08, ...style}}/></Transition></Variants>
</LayoutGroup>)

});

const css = ["@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }", ".framer-B37TV.framer-qx318g, .framer-B37TV .framer-qx318g { display: block; }", ".framer-B37TV.framer-5tsxk7 { height: 960px; overflow: hidden; position: relative; width: 1200px; }"]

/**
 * This is a generated Framer component.
 * @framerIntrinsicHeight 960
 * @framerIntrinsicWidth 1200
 * @framerCanvasComponentVariantDetails {"propertyName":"variant","data":{"default":{"layout":["fixed","fixed"]}}}
 * @framerImmutableVariables true
 * @framerDisplayContentsDiv false
 * @framerComponentViewportWidth true
 */
const FramerlXv0LgM3c: React.ComponentType<Props> = withCSS(Component, css, "framer-B37TV") as typeof Component;
export default FramerlXv0LgM3c;

FramerlXv0LgM3c.displayName = "Layout/Body Background Image";

FramerlXv0LgM3c.defaultProps = {height: 960, width: 1200};

addFonts(FramerlXv0LgM3c, [{explicitInter: true, fonts: []}], {supportsExplicitInterCodegen: true})