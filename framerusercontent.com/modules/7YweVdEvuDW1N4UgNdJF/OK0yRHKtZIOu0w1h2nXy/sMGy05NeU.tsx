// Generated by Framer (cf240c2)

import { addFonts, addPropertyControls, ControlType, cx, CycleVariantState, useActiveVariantCallback, useComponentViewport, useLocaleInfo, useVariantState, withCSS } from "framer";
import { LayoutGroup, motion, MotionConfigContext } from "framer-motion";
import * as React from "react";

const enabledGestures = {"I2847:4028;2843:3479": {hover: true}};

const serializationHash = "framer-1pwiS"

const variantClassNames = {"I2847:4028;2843:3479": "framer-v-ef9byx"};

function addPropertyOverrides(overrides, ...variants) {
const nextOverrides = {}
variants?.forEach(variant => variant && Object.assign(nextOverrides, overrides[variant]))
return nextOverrides
}

const transition1 = {damping: 60, delay: 0, mass: 1, stiffness: 500, type: "spring"}

const Transition = ({value, children}) => {
const config = React.useContext(MotionConfigContext)
const transition = value ?? config.transition
const contextValue = React.useMemo(() => ({ ...config, transition }), [JSON.stringify(transition)])
return <MotionConfigContext.Provider value={contextValue}>{children}</MotionConfigContext.Provider>
}

const Variants = motion.create(React.Fragment)

const getProps = ({height, id, tap, width, ...props}) => { return {...props, MKKuqG1x5: tap ?? props.MKKuqG1x5} }

const createLayoutDependency = (props, variants) => {if (props.layoutDependency) return variants.join('-') + props.layoutDependency
return variants.join('-')}

export interface Props extends React.HTMLAttributes<HTMLDivElement> { style?: Record<string, unknown>;className?: string;layoutId?: string | number;tap?: any; }

const Component = React.forwardRef<HTMLDivElement, Props>(function(props, ref) {

const { activeLocale, setLocale } = useLocaleInfo()

const {style, className, layoutId, variant, MKKuqG1x5, ...restProps} = getProps(props)

const {baseVariant, classNames, clearLoadingGesture, gestureHandlers, gestureVariant, isLoading, setGestureState, setVariant, variants} = useVariantState({defaultVariant: "I2847:4028;2843:3479", enabledGestures, variant, variantClassNames})

const layoutDependency = createLayoutDependency(props, variants)

const { activeVariantCallback, delay } = useActiveVariantCallback(baseVariant)

const onTapxewqd8 = activeVariantCallback(async (...args) => {
setGestureState({isPressed: false})
if (MKKuqG1x5) {const res = await MKKuqG1x5(...args);
if (res === false) return false;}
})

const ref1 = React.useRef<HTMLElement>(null)

const defaultLayoutId = React.useId()

const sharedStyleClassNames = []

const componentViewport = useComponentViewport()

return (<LayoutGroup id={layoutId ?? defaultLayoutId}>
<Variants animate={variants} initial={false}><Transition value={transition1}><motion.div {...restProps} {...gestureHandlers} className={cx(serializationHash, ...sharedStyleClassNames, "framer-ef9byx", className, classNames)} data-border data-framer-name={"Variant 1"} data-highlight layoutDependency={layoutDependency} layoutId={"I2847:4028;2843:3479"} onTap={onTapxewqd8} ref={ref ?? ref1} style={{"--border-bottom-width": "1px", "--border-color": "var(--token-68c05b50-ca7b-4173-82aa-ed42aea1a9b4, rgb(51, 51, 48))", "--border-left-width": "1px", "--border-right-width": "1px", "--border-style": "solid", "--border-top-width": "1px", backgroundColor: "var(--token-cd2934a7-4e35-4347-a32c-9650fca4db23, rgba(24, 24, 24, 0.5))", borderBottomLeftRadius: 8, borderBottomRightRadius: 8, borderTopLeftRadius: 8, borderTopRightRadius: 8, ...style}} variants={{"I2847:4028;2843:3479-hover": {"--border-color": "var(--token-52eaa3b2-9b53-4c12-9790-fce4171dff3e, rgba(239, 231, 210, 0.2))", backgroundColor: "var(--token-c18e5c55-e670-494b-9afe-b018358f3867, rgb(30, 30, 30))"}}} {...addPropertyOverrides({"I2847:4028;2843:3479-hover": {"data-framer-name": undefined}}, baseVariant, gestureVariant)}><motion.div className={"framer-1jrpmsy"} layoutDependency={layoutDependency} layoutId={"fdWBRV5Xi"}><motion.div className={"framer-1nickyg"} data-framer-name={"Menu Toggle Line"} layoutDependency={layoutDependency} layoutId={"I2847:4028;2843:3480"} style={{backgroundColor: "rgb(239, 230, 210)"}}/><motion.div className={"framer-15qmgh6"} data-framer-name={"Menu Toggle Line"} layoutDependency={layoutDependency} layoutId={"I2847:4028;2843:3481"} style={{backgroundColor: "rgb(239, 230, 210)"}}/><motion.div className={"framer-1kctzd1"} data-framer-name={"Menu Toggle Line"} layoutDependency={layoutDependency} layoutId={"I2847:4028;2843:3482"} style={{backgroundColor: "rgb(239, 230, 210)"}}/></motion.div></motion.div></Transition></Variants>
</LayoutGroup>)

});

const css = ["@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }", ".framer-1pwiS.framer-1u5izhy, .framer-1pwiS .framer-1u5izhy { display: block; }", ".framer-1pwiS.framer-ef9byx { align-content: center; align-items: center; cursor: pointer; display: flex; flex-direction: column; flex-wrap: nowrap; gap: 5px; height: 41px; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: 41px; will-change: var(--framer-will-change-override, transform); }", ".framer-1pwiS .framer-1jrpmsy { flex: none; height: 13px; overflow: visible; position: relative; width: 20px; }", ".framer-1pwiS .framer-1nickyg { flex: none; height: 1px; left: 0px; position: absolute; right: 0px; top: 0px; z-index: 1; }", ".framer-1pwiS .framer-15qmgh6 { flex: none; height: 1px; left: 0px; position: absolute; right: 0px; top: calc(48.78048780487807% - 1px / 2); z-index: 1; }", ".framer-1pwiS .framer-1kctzd1 { bottom: 0px; flex: none; height: 1px; left: 0px; position: absolute; right: 0px; z-index: 1; }", "@supports (background: -webkit-named-image(i)) and (not (font-palette:dark)) { .framer-1pwiS.framer-ef9byx { gap: 0px; } .framer-1pwiS.framer-ef9byx > * { margin: 0px; margin-bottom: calc(5px / 2); margin-top: calc(5px / 2); } .framer-1pwiS.framer-ef9byx > :first-child { margin-top: 0px; } .framer-1pwiS.framer-ef9byx > :last-child { margin-bottom: 0px; } }", ".framer-1pwiS.framer-v-ef9byx.hover .framer-1nickyg { top: calc(46.15384615384618% - 1px / 2); }", ".framer-1pwiS.framer-v-ef9byx.hover .framer-1kctzd1 { bottom: unset; top: calc(46.15384615384618% - 1px / 2); }", ".framer-1pwiS[data-border=\"true\"]::after, .framer-1pwiS [data-border=\"true\"]::after { content: \"\"; border-width: var(--border-top-width, 0) var(--border-right-width, 0) var(--border-bottom-width, 0) var(--border-left-width, 0); border-color: var(--border-color, none); border-style: var(--border-style, none); width: 100%; height: 100%; position: absolute; box-sizing: border-box; left: 0; top: 0; border-radius: inherit; pointer-events: none; }"]

/**
 * This is a generated Framer component.
 * @framerIntrinsicHeight 41
 * @framerIntrinsicWidth 41
 * @framerCanvasComponentVariantDetails {"propertyName":"variant","data":{"default":{"layout":["fixed","fixed"]},"SRQA98agY":{"layout":["fixed","fixed"]}}}
 * @framerVariables {"MKKuqG1x5":"tap"}
 * @framerImmutableVariables true
 * @framerDisplayContentsDiv false
 * @framerComponentViewportWidth true
 */
const FramersMGy05NeU: React.ComponentType<Props> = withCSS(Component, css, "framer-1pwiS") as typeof Component;
export default FramersMGy05NeU;

FramersMGy05NeU.displayName = "Menu/Menu Nav Toggle";

FramersMGy05NeU.defaultProps = {height: 41, width: 41};

addPropertyControls(FramersMGy05NeU, {MKKuqG1x5: {title: "Tap", type: ControlType.EventHandler}} as any)

addFonts(FramersMGy05NeU, [{explicitInter: true, fonts: []}], {supportsExplicitInterCodegen: true})